//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by iocli, run 'iocli gen' to re-generate

package marketServcie

import (
	autowire "github.com/alibaba/ioc-golang/autowire"
	normal "github.com/alibaba/ioc-golang/autowire/normal"
	singleton "github.com/alibaba/ioc-golang/autowire/singleton"
	util "github.com/alibaba/ioc-golang/autowire/util"
)

func init() {
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &binanceProvider_{}
		},
	})
	binanceProviderStructDescriptor := &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &BinanceProvider{}
		},
		ConstructFunc: func(i interface{}, _ interface{}) (interface{}, error) {
			impl := i.(*BinanceProvider)
			var constructFunc BinanceProviderConstructFunc = NewBinanceProvider
			return constructFunc(impl)
		},
		Metadata: map[string]interface{}{
			"aop":      map[string]interface{}{},
			"autowire": map[string]interface{}{},
		},
	}
	singleton.RegisterStructDescriptor(binanceProviderStructDescriptor)
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &marketService_{}
		},
	})
	marketServiceStructDescriptor := &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &MarketService{}
		},
		ConstructFunc: func(i interface{}, _ interface{}) (interface{}, error) {
			impl := i.(*MarketService)
			var constructFunc MarketServiceConstructFunc = NewMarketService
			return constructFunc(impl)
		},
		Metadata: map[string]interface{}{
			"aop":      map[string]interface{}{},
			"autowire": map[string]interface{}{},
		},
	}
	singleton.RegisterStructDescriptor(marketServiceStructDescriptor)
}

type BinanceProviderConstructFunc func(impl *BinanceProvider) (*BinanceProvider, error)
type MarketServiceConstructFunc func(impl *MarketService) (*MarketService, error)
type binanceProvider_ struct {
	Initialize_ func()
}

func (b *binanceProvider_) Initialize() {
	b.Initialize_()
}

type marketService_ struct {
}

type BinanceProviderIOCInterface interface {
	Initialize()
}

type MarketServiceIOCInterface interface {
}

var _binanceProviderSDID string

func GetBinanceProviderSingleton() (*BinanceProvider, error) {
	if _binanceProviderSDID == "" {
		_binanceProviderSDID = util.GetSDIDByStructPtr(new(BinanceProvider))
	}
	i, err := singleton.GetImpl(_binanceProviderSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(*BinanceProvider)
	return impl, nil
}

func GetBinanceProviderIOCInterfaceSingleton() (BinanceProviderIOCInterface, error) {
	if _binanceProviderSDID == "" {
		_binanceProviderSDID = util.GetSDIDByStructPtr(new(BinanceProvider))
	}
	i, err := singleton.GetImplWithProxy(_binanceProviderSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(BinanceProviderIOCInterface)
	return impl, nil
}

type ThisBinanceProvider struct {
}

func (t *ThisBinanceProvider) This() BinanceProviderIOCInterface {
	thisPtr, _ := GetBinanceProviderIOCInterfaceSingleton()
	return thisPtr
}

var _marketServiceSDID string

func GetMarketServiceSingleton() (*MarketService, error) {
	if _marketServiceSDID == "" {
		_marketServiceSDID = util.GetSDIDByStructPtr(new(MarketService))
	}
	i, err := singleton.GetImpl(_marketServiceSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(*MarketService)
	return impl, nil
}

func GetMarketServiceIOCInterfaceSingleton() (MarketServiceIOCInterface, error) {
	if _marketServiceSDID == "" {
		_marketServiceSDID = util.GetSDIDByStructPtr(new(MarketService))
	}
	i, err := singleton.GetImplWithProxy(_marketServiceSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(MarketServiceIOCInterface)
	return impl, nil
}

type ThisMarketService struct {
}

func (t *ThisMarketService) This() MarketServiceIOCInterface {
	thisPtr, _ := GetMarketServiceIOCInterfaceSingleton()
	return thisPtr
}
